'use strict';

var Store=function(r){function n(e){if(t[e])return t[e].exports;var o=t[e]={exports:{},id:e,loaded:!1};return r[e].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}var t={};return n.m=r,n.c=t,n.p="",n(0)}([function(r,n,t){r.exports=t(1).Store},function(r,n){"use strict";function t(r){return"[object Object]"===Object.prototype.toString.call(r)}function e(r){return Array.isArray(r)}Object.defineProperty(n,"__esModule",{value:!0});var o=Object.assign||function(r){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(r[e]=t[e])}return r};n.Store=function(r){function n(r,e){var o=arguments.length<=2||void 0===arguments[2]?[]:arguments[2];for(var i in e)e.hasOwnProperty(i)&&!function(){var u=e[i];o.push(""+i),t(u)?r[i]=n(r[i]||{},u,o):"function"==typeof u?!function(){var n=[].concat(o).join(".");r[i]=function(t){var e=c.filter(function(r){return n.indexOf(r[0])!==-1}).reduceRight(function(r,t){return t[1](r,a,n)},u.bind(r));return e(t)}}():r[i]=r[i]||u,o.pop()}();return r}var i=arguments.length<=1||void 0===arguments[1]?[]:arguments[1],u=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],c=i.map(function(r){return"function"==typeof r?["",r]:r}),a=u;return a=o(u,{applyMiddleware:function(r){if(!e(r))throw Error("Please pass a middleware.");c=e(r[0])?c.concat(r):c.concat([r])},unapplyMiddleware:function(r){if(!e(r))throw Error("Please pass a middleware.");r=e(r[0])?r:[r],c=c.filter(function(n){return!r.some(function(r){return r[0]===n[0]&&r[1]===n[1]})})},getMiddlewares:function(){return c},addNode:function(r,t){return a[r]=n(a[r]||{},t,[r]),a[r]},removeNode:function(r){delete a[r],c=c.filter(function(n){return n[0].indexOf(r)===-1})}}),n(a,r)}}]);

let todoHandler = {
	list: [],
	add (task) {
		this.list = this.list.concat([task]);
	},
	remove (id) {
		this.list = this.list.filter((task) => task.id !== id);
	}
}

let actions = {
	todo: todoHandler
};


let store = new Store(actions);

store.todo.add({id: 1, task: "task 1"});
console.log(store.todo.list);
// =>
// [ { id: 1, task: 'task 1' } ]

store.todo.remove(1);
console.log(store.todo.list);
// =>
// []


let clone = (data) => {
  return JSON.parse(JSON.stringify(data));
}

// A middleware to log changes in state
let logger = (next, store, path) => {
	return (arg) => {
		console.log("path:", path);
		console.log("before:", clone(store));
		let returnedValue = next(arg);
		console.log("after:", clone(store));
	}
}

// Attach logger to 'todo.add' action
// so that it only logs state changes made by this action
store.applyMiddleware(["todo.add", logger]);

store.todo.add({id: 2, task: "Demo middleware."});
// =>
// path: todo.add
// before: { todo: { list: [ [] ] } }
// after: { todo: { list: [ {id: 2, task: "Demo middleware."} ] } }

store.todo.remove(2); // won't log changes made by this action

// Detach logger
store.unapplyMiddleware(["todo.add", logger]);

// Apply logger globally so that state changes made by every actions is logged.
store.applyMiddleware(["", logger]);


store.todo.add({id: 2, task: "Demo middleware."});
// =>
// path: todo.add
// before: { todo: { list: [] } }
// after: { todo: { list: [ {id: 2, task: "Demo middleware."} ] } }

store.todo.remove(2);
// =>
// path: todo.remove
// before: { todo: { list: [ {id: 2, task: "Demo middleware."} ] } }
// after: { todo: { list: [] } }


// Use this state to render UI?
// Create a renderer middleware
let renderer = (next, store, path) => {
	return (arg) => {
		let newState = next(arg);

		aViewFramework.render(document.body, aComponent, newState);

		return newState;
	}
};

// Apply it globally
store.applyMiddleware(["", renderer]);

// Now every changes to state are rendered
// To stop rendering the changes just detach the middleware
store.unapplyMiddleware(["", renderer]);
